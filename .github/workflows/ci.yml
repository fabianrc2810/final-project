name: CI pipeline

permissions:
  contents: write
  actions: write

on:
  push:
    branches: ['main']

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run linter
        run: npx eslint .

      - name: Run unit tests
        run: npm test

  build-and-push-docker-image:
    name: Build Docker image and push to Docker Hub
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./ 
          tags: fabianrc2810/final-project:${{ github.sha }}
          push: ${{ github.ref == 'refs/heads/main' }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-push-docker-image]
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Increment version
        id: versioning
        run: |
          VERSION=$(jq -r ".version" package.json)
          IFS='.' read -r major minor patch <<< "$VERSION"
          NEW_VERSION="$major.$minor.$((patch+1))"
          echo "New Version: $NEW_VERSION"
          jq ".version=\"$NEW_VERSION\"" package.json > package.tmp.json && mv package.tmp.json package.json
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit and push version bump
        run: |
          git config --global user.email "fabianhr.fr@gmail.com"
          git config --global user.name "fabianrc2810"
          git add package.json
          git commit -m "chore: bump version to ${{ env.VERSION }}"
          git tag "v${{ env.VERSION }}"
          git push origin main --tags

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: "Automated release for version ${{ env.VERSION }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      

  update-manifest-stage:
    name: Update manifest stage
    runs-on: ubuntu-latest
    needs: [create-github-release]

    steps:
      - name: Checkout final-project-argocd repository
        uses: actions/checkout@v3
        with:
          repository: 'fabianrc2810/final-project-argocd'
          ref: 'main'
          token: ${{ secrets.G_TOKEN }}
      - name: Setup git config
        run: |
          git config --global user.email "fabianhr.fr@gmail.com"
          git config --global user.name "fabianrc2810"
          echo ${{ github.sha }}
          sed -i "s#${{ github.actor }}.*#${{ github.actor }}/final-project:${{ github.sha }}#g" deployment.yml
          git add -A
          git commit -m "Update deployment image for - ${{ github.sha }}"
      - run: echo ${{ github }}
      - run: git push origin main
